//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.18052
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IUpLoadService")]
public interface IUpLoadService
{
    
    // CODEGEN: メッセージ FileUploadMessage のラッパーの名前 (FileUploadMessage) が既定値 (UploadFile) と一致しないため、メッセージ コントラクトを生成しています
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="UploadFile")]
    void UploadFile(FileUploadMessage request);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="UploadFile")]
    System.Threading.Tasks.Task UploadFileAsync(FileUploadMessage request);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class FileUploadMessage
{
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
    public string FileName;
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
    public string SavePath;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public System.IO.Stream FileData;
    
    public FileUploadMessage()
    {
    }
    
    public FileUploadMessage(string FileName, string SavePath, System.IO.Stream FileData)
    {
        this.FileName = FileName;
        this.SavePath = SavePath;
        this.FileData = FileData;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IUpLoadServiceChannel : IUpLoadService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class UpLoadServiceClient : System.ServiceModel.ClientBase<IUpLoadService>, IUpLoadService
{
    
    public UpLoadServiceClient()
    {
    }
    
    public UpLoadServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public UpLoadServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public UpLoadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public UpLoadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IUpLoadService.UploadFile(FileUploadMessage request)
    {
        base.Channel.UploadFile(request);
    }
    
    public void UploadFile(string FileName, string SavePath, System.IO.Stream FileData)
    {
        FileUploadMessage inValue = new FileUploadMessage();
        inValue.FileName = FileName;
        inValue.SavePath = SavePath;
        inValue.FileData = FileData;
        ((IUpLoadService)(this)).UploadFile(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task IUpLoadService.UploadFileAsync(FileUploadMessage request)
    {
        return base.Channel.UploadFileAsync(request);
    }
    
    public System.Threading.Tasks.Task UploadFileAsync(string FileName, string SavePath, System.IO.Stream FileData)
    {
        FileUploadMessage inValue = new FileUploadMessage();
        inValue.FileName = FileName;
        inValue.SavePath = SavePath;
        inValue.FileData = FileData;
        return ((IUpLoadService)(this)).UploadFileAsync(inValue);
    }
}
