//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IUploadService")]
public interface IUploadService
{
    
    // CODEGEN: 操作 UploadFile 以后生成的消息协定不是 RPC，也不是换行文档。
    [System.ServiceModel.OperationContractAttribute(Action="UploadFile", ReplyAction="http://tempuri.org/IUploadService/UploadFileResponse")]
    UploadFileResponse UploadFile(FileUploadMessage request);
    
    [System.ServiceModel.OperationContractAttribute(Action="UploadFile", ReplyAction="http://tempuri.org/IUploadService/UploadFileResponse")]
    System.Threading.Tasks.Task<UploadFileResponse> UploadFileAsync(FileUploadMessage request);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class FileUploadMessage
{
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
    public string FileName;
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
    public string SavePath;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public System.IO.Stream FileData;
    
    public FileUploadMessage()
    {
    }
    
    public FileUploadMessage(string FileName, string SavePath, System.IO.Stream FileData)
    {
        this.FileName = FileName;
        this.SavePath = SavePath;
        this.FileData = FileData;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
public partial class UploadFileResponse
{
    
    public UploadFileResponse()
    {
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IUploadServiceChannel : IUploadService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class UploadServiceClient : System.ServiceModel.ClientBase<IUploadService>, IUploadService
{
    
    public UploadServiceClient()
    {
    }
    
    public UploadServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public UploadServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public UploadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public UploadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    UploadFileResponse IUploadService.UploadFile(FileUploadMessage request)
    {
        return base.Channel.UploadFile(request);
    }
    
    public void UploadFile(string FileName, string SavePath, System.IO.Stream FileData)
    {
        FileUploadMessage inValue = new FileUploadMessage();
        inValue.FileName = FileName;
        inValue.SavePath = SavePath;
        inValue.FileData = FileData;
        UploadFileResponse retVal = ((IUploadService)(this)).UploadFile(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<UploadFileResponse> IUploadService.UploadFileAsync(FileUploadMessage request)
    {
        return base.Channel.UploadFileAsync(request);
    }
    
    public System.Threading.Tasks.Task<UploadFileResponse> UploadFileAsync(string FileName, string SavePath, System.IO.Stream FileData)
    {
        FileUploadMessage inValue = new FileUploadMessage();
        inValue.FileName = FileName;
        inValue.SavePath = SavePath;
        inValue.FileData = FileData;
        return ((IUploadService)(this)).UploadFileAsync(inValue);
    }
}
